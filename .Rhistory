library(igraph)
install.packages(igraph)
install.packages(igraph)
install.packages("igraph")
## Load package
library(igraph)
clear
cls
g <- graph( c(1,2, 1,3, 2,3, 3,5), n=5 )
V(g)
E(g)
g <- graph.empty() + vertices(letters[1:10], color="red")
g <- g + vertices(letters[11:20], color="blue")
g <- g + edges(sample(V(g), 30, replace=TRUE), color="green")
V(g)
E(g)
g <- erdos.renyi.game(10, 0.5)
V(g)$color <- sample( c("red", "black"), vcount(g), rep=TRUE)
> E(g)$color
V(g)$color <- sample( c("red", "black"), vcount(g), rep=TRUE)
E(g)$color <- "grey"
red <- V(g)[ color == "red" ]
bl <- V(g)[ color == "black" ]
E(g)[ red %--% red ]$color <- "red"
E(g)[ bl %--% bl ]$color <- "black"
g <- graph.lattice( c(10,10) )
E(g)$weight <- runif(ecount(g))
E(g)$color <- "grey"
E(g)[ weight > 0.9 ]$color <- "red"
er_graph <- erdos.renyi.game(100, 2/100)
plot(er_graph, vertex.label=NA, vertex.size=3)
ws_graph <- watts.strogatz.game(1, 100, 4, 0.05)
plot(ws_graph, layout=layout.circle, vertex.label=NA, vertex.size=3)
ba_graph <- barabasi.game(100)
plot(ba_graph, vertex.label=NA, vertex.size=3)
g <- graph.lattice( c(10,10) )
E(g)$weight <- runif(ecount(g))
E(g)$color <- "grey"
E(g)[ weight > 0.9 ]$color <- "red"
plot(g, vertex.size=2, vertex.label=NA, layout=layout.kamada.kawai,
edge.width=2+3*E(g)$weight)
g <- graph.lattice( length=100, dim=1, nei=4 )
average.path.length(g)
diameter(g)
g <- rewire.edges( g, prob=0.05 )
average.path.length(g)
diameter(g)
ws <- watts.strogatz.game(1, 100, 4, 0.05)
transitivity(ws)
p_hat <- ecount(ws)/(vcount(ws)*(vcount(ws))/2)
p_hat
er <- erdos.renyi.game(100, p_hat)
transitivity(er)
g <- graph.ring(10)
g <- graph.ring(10)
plot(g)
degree(g)
ba <- barabasi.game(10000, m=3)
p_hat <- ecount(ba)/ ((vcount(ba)-1)*vcount(ba)/2)
er <- erdos.renyi.game(10000, p_hat)
degree.distribution(er)
hist(degree(er))
hist(degree(ba))
plot(degree.distribution(er))
plot(degree.distribution(ba))
set.seed(1)
g <- sample_gnp(10, 3/10)
plot(g, vertex.size=25, layout=layout.kamada.kawai)
6
betweenness(g)
edge_betweenness(g)
degree(g)
closeness(g)
page.rank(g)$vector
karate <- graph.famous("Zachary")
wc <- walktrap.community(karate)
modularity(wc)
membership(wc)
plot(wc, karate)
plot(karate, vertex.color=membership(wc))
For
plot(karate, vertex.color=membership(wc))
karate <- graph.famous("Zachary")
fc <- fastgreedy.community(karate)
dendPlot(fc)
g <- read.graph("edges.txt", format="edgelist")
g <- read.graph("edges.txt")
g <- read.graph("C:\Users\edacal\Downloads\session7networks\edges.txt")
g <- read.graph("C:\\Users\\edacal\\Downloads\\session7networks\\edges.txt")
plot(g)
g <- read.graph("C:\\Users\\edacal\\Downloads\\session7networks\\edges.txt",directed = FALSE)
plot(g)
g <- read.graph("C:\\Users\\edacal\\Downloads\\session7networks\\edges.txt")
library(igraph)
g <- read.graph("C:\\Users\\edacal\\Downloads\\session7networks\\edges.txt")
plot(g)
V(g)
E(g)
g <- read.graph("C:\\Users\\edacal\\Downloads\\session7networks\\edges.txt",directed = FALSE)
plot(g)
to their pagerank.
library(igraph)
g <- read.graph("C:\\Users\\edacal\\Downloads\\session7networks\\edges.txt",directed = FALSE)
plot(g)
V(g)
E(g)
diameter(g)
transitivity(g)
degree.distribution(g)
library(igraph)
g <- read.graph("C:\\Users\\edacal\\Downloads\\session7networks\\edges.txt",directed = FALSE)
plot(g)
V(g)
E(g)
diameter(g)
transitivity(g)
degree.distribution(g)
degree(g)
pagerank(g)
page.rank(g)$vector
plot(g,vertex.size=2)
plot(g,vertex.size=20)
l <- page.rank(g)$vector
plot(g,vertex.size=l)
plot(g,vertex.size=l * 20)
plot(g,vertex.size=l * 500)
wc <- infomap.community(g)
plot(wc, karate)
l <- page.rank(g)$vector
plot(wc, g)
plot(wc, vertex.color=membership(wc))
plot(g, vertex.color=membership(wc))
plot(wc, g)
wc <- optimal.community(g)
wc <- optimal.community(g)
plot(g, vertex.color=membership(wc))
dendPlot(fc)
dendPlot(wc)
cluster<- as_clustering(wc)
hist(membership(gc),breaks=18)
hist(membership(wc),breaks=18)
wc
op <- optimal.community(g)
op
plot(g, vertex.color=membership(op))
hist(membership(op),breaks=18)
op$1
op[1]
library(igraph)
op <- optimal.community(g)
op[1]
op[2]
op[3]
op[4]
op[5]
op[1]
op[2]
op[3]
op[4]
op[5]
op[6]
op[7]
op[8]
op[9]
op[5]
length(op)
op[1]
op[2]
op[3]
op[4]
op[5]
library(igraph)
# Task 1
graph.c <- c()
graph.l <- c()
ws_graph <- watts.strogatz.game(1, 1000, 4, 0)
C <- transitivity(ws_graph)
L <- average.path.length(ws_graph)
graph.c <- c(1)
graph.l <- c(1)
seqq <- c(0.0001, 0.0002, 0.0004, 0.0008, 0.001, 0.002, 0.004,
0.008, 0.01, 0.02, 0.04, 0.08, 0.1, 0.2, 0.4, 0.8, 1)
for(P in seqq)
{
?watts.strogatz.game
ws_graph <- watts.strogatz.game(1, 1000, 4, P)
graph.c <- c(graph.c, transitivity(ws_graph)/C)
graph.l <- c(graph.l, average.path.length(ws_graph)/L)
}
P <- c(0, seqq)
plot(P,graph.c, pch=0, log="x", ylab="Values")
axis(side=1, at=P)
points(P,graph.l, pch=16)
P <- c(0, seqq)
plot(P,g.c, pch=0, log="x", ylab="Values")
axis(side=1, at=P)
g.l <- c(1)
library(igraph)
# Task 1
g.c <- c()
g.l <- c()
ws_graph <- watts.strogatz.game(1, 1000, 4, 0)
C <- transitivity(ws_graph)
L <- average.path.length(ws_graph)
g.c <- c(1)
g.l <- c(1)
seqq <- c(0.0001, 0.0002, 0.0004, 0.0008, 0.001, 0.002, 0.004,
0.008, 0.01, 0.02, 0.04, 0.08, 0.1, 0.2, 0.4, 0.8, 1)
for(P in seqq)
{
?watts.strogatz.game
ws_graph <- watts.strogatz.game(1, 1000, 4, P)
g.c <- c(g.c, transitivity(ws_graph)/C)
g.l <- c(g.l, average.path.length(ws_graph)/L)
}
P <- c(0, seqq)
plot(P,g.c, pch=0, log="x", ylab="Values")
axis(side=1, at=P)
points(P,g.l, pch=16)
library(igraph)
# Task 1
g.c <- c()
g.l <- c()
ws_graph <- watts.strogatz.game(1, 1000, 4, 0)
C <- transitivity(ws_graph)
L <- average.path.length(ws_graph)
g.c <- c(1)
g.l <- c(1)
seqq <- c(0.0001, 0.0002, 0.0004, 0.0008, 0.001, 0.002, 0.004,
0.008, 0.01, 0.02, 0.04, 0.08, 0.1, 0.2, 0.4, 0.8, 1)
for(P in seqq)
{
?watts.strogatz.game
ws_graph <- watts.strogatz.game(1, 1000, 4, P)
g.c <- c(g.c, transitivity(ws_graph)/C)
g.l <- c(g.l, average.path.length(ws_graph)/L)
}
P <- c(0, seqq)
plot(P,g.c, pch=0, log="x", ylab="Values")
axis(side=1, at=P)
points(P,g.l, pch=16)
# Task 2
g <- read.graph("edges.txt",directed = FALSE)
plot(g)
V(g)
E(g)
diameter(g,directed=FALSE)
transitivity(g)
degree.distribution(g)
max(degree.distribution(g))
plot(degree.distribution(g))
opt <- optimal.community(g)
plot(opt, g)
dendPlot(opt)
plot(sizes(opt))
max(sizes(opt))
# Task 2
g <- read.graph("edges.txt",directed = FALSE)
plot(g)
V(g)
E(g)
diameter(g,directed=FALSE)
transitivity(g)
degree.distribution(g)
max(degree.distribution(g))
plot(degree.distribution(g))
opt <- optimal.community(g)
plot(opt, g)
dendPlot(opt)
plot(sizes(opt))
max(sizes(opt))
# Task 2
setwd("C:\\Users\\edacal\\Downloads\\session7networks")
g <- read.graph("edges.txt",directed = FALSE)
plot(g)
V(g)
E(g)
diameter(g,directed=FALSE)
transitivity(g)
degree.distribution(g)
max(degree.distribution(g))
plot(degree.distribution(g))
opt <- optimal.community(g)
plot(opt, g)
dendPlot(opt)
plot(sizes(opt))
max(sizes(opt))
plot(opt, g)
library(igraph)
# Task 1
g.c <- c()
g.l <- c()
ws_graph <- watts.strogatz.game(1, 1000, 4, 0)
C <- transitivity(ws_graph)
L <- average.path.length(ws_graph)
g.c <- c(1)
g.l <- c(1)
seqq <- c(0.0001, 0.0002, 0.0004, 0.0008, 0.001, 0.002, 0.004,
0.008, 0.01, 0.02, 0.04, 0.08, 0.1, 0.2, 0.4, 0.8, 1)
for(P in seqq)
{
?watts.strogatz.game
ws_graph <- watts.strogatz.game(1, 1000, 4, P)
g.c <- c(g.c, transitivity(ws_graph)/C)
g.l <- c(g.l, average.path.length(ws_graph)/L)
}
P <- c(0, seqq)
plot(P,g.c, pch=0, log="x", ylab="Values")
axis(side=1, at=P)
points(P,g.l, pch=16)
library(igraph)
# Task 1
g.c <- c()
g.l <- c()
graph <- watts.strogatz.game(1, 1000, 4, 0)
C <- transitivity(graph)
L <- average.path.length(graph)
g.c <- c(1)
g.l <- c(1)
seqq <- c(0.0001, 0.0002, 0.0004, 0.0008, 0.001, 0.002, 0.004,
0.008, 0.01, 0.02, 0.04, 0.08, 0.1, 0.2, 0.4, 0.8, 1)
for(P in seqq)
{
?watts.strogatz.game
graph <- watts.strogatz.game(1, 1000, 4, P)
g.c <- c(g.c, transitivity(graph)/C)
g.l <- c(g.l, average.path.length(graph)/L)
}
P <- c(0, seqq)
plot(P,g.c, pch=0, log="x", ylab="Values")
axis(side=1, at=P)
points(P,g.l, pch=16)
grade(g)
degree(g)
degree.distribution(g)
opt <- optimal.community(g)
transitivity(g)
# Task 2
setwd("C:\\Users\\edacal\\Downloads\\session7networks")
g <- read.graph("edges.txt",directed = FALSE)
plot(g)
V(g)
E(g)
diameter(g,directed=FALSE)
transitivity(g)
degree(g)
degree.distribution(g)
max(degree.distribution(g))
plot(degree.distribution(g))
wal <- waltrap.community(g)
plot(wal, g)
dendPlot(wal)
plot(sizes(wal))
max(sizes(wal))
wal <- walktrap.community(graph)
plot(wal, g)
dendPlot(wal)
plot(sizes(wal))
max(sizes(wal))
plot(wal, g)
walk <- walktrap.community(graph)
plot(walk, graph)
dendPlot(walk)
plot(sizes(walk))
max(sizes(walk))
for(P in seqq)
seqq <- c(0.0001, 0.0002, 0.0004, 0.0008, 0.001, 0.002, 0.004,
0.008, 0.01, 0.02, 0.04, 0.08, 0.1, 0.2, 0.4, 0.8, 1)
setwd("/home2/users/alumnes/1182121/dades/CAIM/session7networks/")
graph <- read.graph("edges.txt", format="edgelist", directed=FALSE)
plot(graph)
length(V(graph))
length(E(graph))
diameter(graph, directed=FALSE)
transitivity(graph)
max(degree.distribution(graph))
plot(degree.distribution(graph))
walk <- walktrap.community(graph)
plot(walk, graph)
dendPlot(walk)
plot(sizes(walk))
max(sizes(walk))
plot(walk, graph)
dendPlot(walk)
plot(walk, graph)
sizes(wal)
setwd("/home2/users/alumnes/1182121/dades/CAIM/session7networks/")
graph <- read.graph("edges.txt", format="edgelist", directed=FALSE)
plot(graph)
length(V(graph))
length(E(graph))
diameter(graph, directed=FALSE)
transitivity(graph)
max(degree.distribution(graph))
plot(degree.distribution(graph))
walk <- walktrap.community(graph)
plot(walk, graph)
dendPlot(walk)
plot(sizes(walk))
max(sizes(walk))
wal <- walktrap.community(graph)
plot(wal, g)
sizes(wal)
dendPlot(wal)
plot(sizes(wal))
max(sizes(wal))
dendPlot(wal)
plot(sizes(wal))
View(walk)
library(igraph)
# Task 1
g.c <- c()
g.l <- c()
graph <- watts.strogatz.game(1, 1000, 4, 0)
C <- transitivity(graph)
L <- average.path.length(graph)
g.c <- c(1)
g.l <- c(1)
seqq <- c(0.0001, 0.0002, 0.0004, 0.0008, 0.001, 0.002, 0.004,
0.008, 0.01, 0.02, 0.04, 0.08, 0.1, 0.2, 0.4, 0.8, 1)
for(P in seqq)
{
?watts.strogatz.game
graph <- watts.strogatz.game(1, 1000, 4, P)
g.c <- c(g.c, transitivity(graph)/C)
g.l <- c(g.l, average.path.length(graph)/L)
}
P <- c(0, seqq)
plot(P,g.c, pch=0, log="x", ylab="Values")
axis(side=1, at=P)
points(P,g.l, pch=16)
